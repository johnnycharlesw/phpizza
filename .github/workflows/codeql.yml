# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL Advanced"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 8 * * 3'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: python
          build-mode: none
        - language: rust
          build-mode: none
        # CodeQL supports the following values keywords for 'language': 'actions', 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'rust', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Add any setup steps before running the `github/codeql-action/init` action.
    # This includes steps like installing compilers or runtimes (`actions/setup-node`
    # or others). This is typically only required for manual builds.
    # - name: Setup runtime (example)
    #   uses: actions/setup-example@v1

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
            
  - name: PHP Code Sniffer (php-actions)
  # You may pin to the exact commit or the version.
  # uses: php-actions/phpcs@0a99a2845164005c597c165cd45dc594d8fe6c1d
  uses: php-actions/phpcs@v1
  with:
    # What version of PHPCS to use
    version: # optional, default is latest
    # What version of PHP to use
    php_version: # optional, default is latest
    # Path to a vendored phpcs binary
    vendored_phpcs_path: # optional
    # One or more files and/or directories to check
    path: 
    # The name or path of the coding standard to use
    standard: 
    # A comma separated list of sniff codes to include checking (all sniffs must be part of the specified standard)
    sniffs: # optional
    # A comma separated list of sniff codes to exclude from checking (all sniffs must be part of the specified standard)
    exclude: # optional
    # A comma separated list of patterns to ignore files and directories
    ignore: # optional
    # The number of spaces each tab represents
    tab_width: # optional
    # Print either the "full", "xml", "checkstyle", "csv", "json", "junit", "emacs", "source", "summary", "diff", "svnblame", "gitblame", "hgblame" or "notifysend" report, or specify the path to a custom report class, (the "full" report is printed by default)
    report: # default is full
    # Write the report to the specified file path
    report_file: # optional
    # How many columns wide screen reports should be printed or set to "auto" to use current screen width, where supported
    report_width: # optional
    # A path to strip from the front of file paths inside reports
    basepath: # optional
    # A comma separated list of files to run before processing begins
    bootstrap: # optional
    # The encoding of the files being checked (default is utf-8)
    encoding: # optional
    # A comma separated list of file extensions to check. The type of the file can be specified using: ext/type e.g., module/php,es/js
    extensions: # optional
    # The minimum severity required to display an error or warning
    severity: # optional
    # The minimum severity required to display an error
    error_severity: # optional
    # The minimum severity required to display a warning
    warning_severity: # optional
    # Exit with a zero error code despite the presence of warnings
    ignore_warnings_on_exit: # optional
    # Exit with a zero error code despite the presence of errors
    ignore_errors_on_exit: # optional
    # Extra arguments to pass to the phpcs binary
    args: # optional
          
